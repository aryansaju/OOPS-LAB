# 1. Bubble Sort using Classes and Methods
class BubbleSort:
    def __init__(self, arr):
        self.arr = arr

    def sort(self):
        n = len(self.arr)
        for i in range(n):
            for j in range(0, n - i - 1):
                if self.arr[j] > self.arr[j + 1]:
                    self.arr[j], self.arr[j + 1] = self.arr[j + 1], self.arr[j]
        return self.arr


# 2. Insertion Sort
def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and key < arr[j]:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key
    return arr


# 3. Selection Sort
def selection_sort(arr):
    for i in range(len(arr)):
        min_idx = i
        for j in range(i + 1, len(arr)):
            if arr[j] < arr[min_idx]:
                min_idx = j
        arr[i], arr[min_idx] = arr[min_idx], arr[i]
    return arr


# 4. Merge Sort
def merge_sort(arr):
    if len(arr) > 1:
        mid = len(arr) // 2
        left = arr[:mid]
        right = arr[mid:]

        merge_sort(left)
        merge_sort(right)

        i = j = k = 0
        while i < len(left) and j < len(right):
            if left[i] < right[j]:
                arr[k] = left[i]
                i += 1
            else:
                arr[k] = right[j]
                j += 1
            k += 1

        while i < len(left):
            arr[k] = left[i]
            i += 1
            k += 1

        while j < len(right):
            arr[k] = right[j]
            j += 1
            k += 1
    return arr


# 5. Linear Search
def linear_search(arr, target):
    for i in range(len(arr)):
        if arr[i] == target:
            return i
    return -1


# 6. Binary Search
def binary_search(arr, target):
    low, high = 0, len(arr) - 1
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1
    return -1


# 7. Binary Tree Implementation
class Node:
    def __init__(self, key):
        self.left = None
        self.right = None
        self.val = key

def inorder(root):
    if root:
        inorder(root.left)
        print(root.val, end=" ")
        inorder(root.right)

def insert(root, key):
    if root is None:
        return Node(key)
    else:
        if key < root.val:
            root.left = insert(root.left, key)
        else:
            root.right = insert(root.right, key)
    return root


# Testing the implementations
if __name__ == "__main__":
    # Bubble Sort
    bubble = BubbleSort([64, 34, 25, 12, 22, 11, 90])
    print("Bubble Sort:", bubble.sort())

    # Insertion Sort
    print("Insertion Sort:", insertion_sort([64, 34, 25, 12, 22, 11, 90]))

    # Selection Sort
    print("Selection Sort:", selection_sort([64, 34, 25, 12, 22, 11, 90]))

    # Merge Sort
    print("Merge Sort:", merge_sort([64, 34, 25, 12, 22, 11, 90]))

    # Linear Search
    print("Linear Search:", linear_search([64, 34, 25, 12, 22, 11, 90], 22))

    # Binary Search
    sorted_array = [11, 12, 22, 25, 34, 64, 90]
    print("Binary Search:", binary_search(sorted_array, 22))

    # Binary Tree
    root = None
    elements = [50, 30, 20, 40, 70, 60, 80]
    for elem in elements:
        root = insert(root, elem)

    print("Inorder Traversal of Binary Tree:", end=" ")
    inorder(root)
